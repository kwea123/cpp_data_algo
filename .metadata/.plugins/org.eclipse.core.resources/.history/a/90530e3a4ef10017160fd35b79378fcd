#include <iostream>
#include <time.h> //set time seed
#include <stdlib.h>
#include <list>
using namespace std;

void Knuth(int* a, int n){
	for(int i=1;i<n;i++){
		int j = rand()%(i+1); // j in 0..i
		int tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}

void insertionSort(int* a, int n) {
	for (int i=1; i<n; i++) {
		int v = a[i], j = i;
		for(;0<j && v<a[j-1];j--)
			a[j] = a[j-1];
		a[j] = v;
	}
}

void merge(int* a1, int* a2, int l, int m, int r){
	int i = l, j = m;
	for (int k = l; k < r; k++)
	if (i < m && (j == r || a1[i] <= a1[j]))
		a2[k] = a1[i++];
	else
		a2[k] = a1[j++];
}

void mergesortrec(int* a, int* tmp, int l, int r){
	if(l>=r-1)
		return;
	int m = l + (r-l)/2; //avoid r+l overflow
	mergesortrec(a, tmp, l, m);
	mergesortrec(a, tmp, m, r);
	for(int i=l;i<r;i++)
		tmp[i] = a[i];
	merge(tmp, a, l, m, r);
}

void mergeSort(int* a, int n){
	mergesortrec(a, new int[n], 0, n);
}

void split(list<int> l1, list<int>& l2, list<int>& l3){
	int i=0;
	while(!l1.empty()){
		if(i==0)
			l2.push_back(l1.front());
		else
			l3.push_back(l1.front());
		i = 1-i;
		l1.pop_front();
	}
}

list<int> merge(list<int> l1, list<int> l2){
	list<int> res;
	while(!l1.empty()&&l2.empty()){
		int a1 = l1.front();
		int a2 = l2.front();
		if(a1<a2){
			l1.pop_front();
			res.push_back(a1);
		} else {
			l2.pop_front();
			res.push_back(a2);
		}
	}
}

int main() {
	srand(time(NULL));

	/* KNUTH SHUFFLE */
//	int a[10] = {0,1,2,3,4,5,6,7,8,9};
//	Knuth(a, 10);
//	cout<<"Knuth shuffle!"<<endl;
//	for(int i=0;i<10;i++)
//		cout<<a[i]<<" ";
//	cout<<endl;

	/* INSERTION SORT */
//	insertionSort(a, 10);
//	cout<<"Insertion sort!"<<endl;
//	for(int i=0;i<10;i++)
//		cout<<a[i]<<" ";
//	cout<<endl;

	/* MERGE SORT */
//	mergeSort(a, 10);
//	for(int i=0;i<10;i++)
//		cout<<a[i]<<" ";
//	cout<<endl;

	list<int> l, l2, l3;
	for(int i=0;i<10;i++)
		l.push_back(i);
	split(l,l2,l3);
	return 0;

}
