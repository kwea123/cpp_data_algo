#include <iostream>
#include <map>
#include <set>
using namespace std;

template <typename T>
struct Graph{

	map<T, set<T> > adj;
	map<pair<T, T>, int> edgeWeights;

	Graph(){
		;
	}

	void addVertex(T t){
		set<T> s;
		adj[t] = s;
	}

	void addEdge(T i, T j, int d){
		adj[i].insert(j);
		pair<T, T> p(i,j);
		edgeWeights[p] = d;
	}

	bool hasEdge(T i, T j){
		return find(adj[i].begin(), adj[i].end(), j) != adj[i].end();
	}

	void removeEdge(T i, T j){
		adj[i].erase(j);
	}

	int edgeWeight(T i, T j){
		pair<T, T> p(i,j);
		return edgeWeights[p];
	}

	set<T> vertices(){
		set<T> s;
		for(auto it : adj)
			s.insert(it.first);
		return s;
	}

	set<T> neighbors(T i){
		return adj[i];
	}

};

//template <typename T>
//struct Node{
//
//	T node;
//	int dist;
//
//	Node(T node, int dist){
//		this->node = node;
//		this->dist = dist;
//	}
//
//	bool operator<(const Node& b) const{
//		return dist > b.dist; //we want smaller values in front
//	}
//};


int main() {
	Graph<int> g;
	for(int i=0;i<5;i++)
		g.addVertex(i);
	g.addEdge(0, 3, 1);
	g.addEdge(1, 0, 2);
	g.addEdge(1, 4, 1);
	g.addEdge(2, 1, 4);
	g.addEdge(2, 4, 1);
	g.addEdge(2, 5, 3);
	g.addEdge(0, 3, 1);
	g.addEdge(3, 1, 1);
	g.addEdge(4, 3, 1);

	cout<<g.edgeWeight(2,1);
}
