#include <iostream>
#include <map>
#include <set>
#include <queue>
using namespace std;

template <typename V>
struct FlowGraph{

	V s, t;
	map<V, set<V> > adj;
	map<pair<V, V>, int> edgeWeights;

	void addVertex(V v){
		set<V> s;
		adj[v] = s;
	}

	void addEdge(V i, V j, int d){
		adj[i].insert(j);
		pair<V, V> p(i,j);
		edgeWeights[p] = d;
	}

	bool hasEdge(V i, V j){
		return find(adj[i].begin(), adj[i].end(), j) != adj[i].end();
	}

	void removeEdge(V i, V j){
		adj[i].erase(j);
	}

	int edgeWeight(V i, V j){
		pair<V, V> p(i,j);
		return edgeWeights[p];
	}

	set<V> vertices(){
		set<V> s;
		for(auto it : adj)
			s.insert(it.first);
		return s;
	}

	set<V> neighbors(V i){
		return adj[i];
	}

	int maxflow(){
		queue<V> q;
		map<V, V> visited;
		q.push(s);
		visited[s] = s;
		while(!q.empty()){
			V j = q.front();
			if(j==t)
				break;
			q.pop();
			for(V k : neighbors(j))
				if(!visited.count(k)){
					q.push(k);
					visited[k] = j;
				}
		}
		V parent = t;
		while(parent!=s){
			cout<<parent<<" ";
			parent = visited[parent];
		}
	}

	void bfs(int i, queue<int>& q, set<int>& visited){
		q.push(i);
		visited.insert(i);
		while(!q.empty()){
			int j = q.front();
			q.pop();
			for(int k : neighbors(j))
				if(!visited.count(k)){
					q.push(k);
					visited.insert(k);
				}
		}
	}

};

int main() {
	Graph<int> g;
	for(int i=0;i<5;i++)
		g.addVertex(i);
	g.addEdge(0, 3, 1);
	g.addEdge(1, 0, 2);
	g.addEdge(1, 4, 1);
	g.addEdge(2, 1, 4);
	g.addEdge(2, 4, 1);
	g.addEdge(2, 5, 3);
	g.addEdge(0, 3, 1);
	g.addEdge(3, 1, 1);
	g.addEdge(4, 3, 1);
	g.addEdge(4, 5, 1);


	return 0;
}
