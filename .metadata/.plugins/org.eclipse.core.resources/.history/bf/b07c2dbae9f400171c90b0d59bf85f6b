#include <iostream>
#include <time.h>
using namespace std;

struct BIT{
	int N;
	int* tree;

	BIT(int N){
		this->N = N;
		this->tree = new int[N+1]();
	}

	void add(int idx ,int val){ //adds val to a[idx]
	    while (idx <= N){
	        tree[idx] += val;
	        idx += (idx & -idx);
	    }
	}

	int cumulativeSum(int idx){ //returns a[1]+...+a[idx]
		int sum = 0;
		while (idx > 0){
			sum += tree[idx];
			idx -= (idx & -idx);
		}
		return sum;
	}

	int rangeSum(int l, int r){ //returns a[l]+...+a[r]
		return cumulativeSum(r) - cumulativeSum(l-1);
	}

	int get(int idx){ //get a[idx]
		int sum = tree[idx];
		if (idx > 0){
		    int z = idx - (idx & -idx);
		    idx--;
		    while (idx != z){
		        sum -= tree[idx];
		        idx -= (idx & -idx);
		    }
		}
		return sum;
	}
};

int countSolutionsRec(int a, int b, int c) {
	if (a == 0) return 1;
	int f = 0, e = a & ~b & ~c;
	while (e != 0) {
		int d = e & -e;
		f += countSolutionsRec(a - d, (b + d) << 1, (c + d) >> 1);
		e -= d;
	}
	return f;
}

int countSolutions(int n) {
	return countSolutionsRec(~(~0 << n), 0, 0);
}

int main() {
//	int N = 50000;
//	BIT bit = BIT(N);
//
//	clock_t t1 = clock();
//
//	for(int i=1;i<=N;i++)
//		bit.add(i, i);
//	for(int i=1;i<N;i++)
//		bit.cumulativeSum(i);
//
//	clock_t t2 = clock();
//	cout<<"BIT takes : "<<t2 - t1<<" clock cycles."<<endl;
//
//	int* a = new int[N+1]();
//	int sum = 0;
//	for(int i=1;i<=N;i++)
//		a[i] = i;
//	for(int i=1;i<N;i++){
//		sum = 0;
//		for(int j=1;j<=i;j++)
//			sum += a[j];
//	}
//
//	cout<<"Array takes : "<<clock() - t2<<" clock cycles."<<endl;

	cout<<countSolutions(15)<<endl;

	return 0;
}
