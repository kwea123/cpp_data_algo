#include <iostream>
#include <stdexcept>
using namespace std;

struct PriorityQueue{
	int* elements;
	int size;

	PriorityQueue(int capacity){
		elements = new int[capacity];
		size = 0;
	}

	bool isEmpty(){
		return size == 0;
	}

	int getMin(){
		if(size==0)
			throw exception("No such element");
		return elements[0];
	}

	void moveUp(int x, int i) { //add x to the position i and move it up
		while (i > 0) {
			int parent_i = (i - 1) / 2;
			int y = elements[parent_i];
			if (y <= x)
				break;
			elements[i] = y; //insert y to this place
			i = parent_i; //and move the node up, keep comparing
		}
		elements[i] = x;
	}

	void add(int x) {
		moveUp(x, size++);
	}

	void moveDown(int x, int i) { //add x to the position i and move it down
		int n = size;             //remember, we move the bottom right element to i=0
		while (true) {
			int j = 2 * i + 1;
			if (j >= n) //if no left child, no right child either
				break;
			if (j + 1 < n && elements[j] > elements[j + 1]) //if left child > right child, j++, compare the below code
				j++;
			if (x <= elements[j]) //if x is smaller than its children, no need to move down anymore
				break;
			elements[i] = elements[j];
			i = j;
		}
		elements[i] = x;
	}



};

int main() {
	cout << "!!!Hello World!!!" << endl; // prints !!!Hello World!!!
	return 0;
}
