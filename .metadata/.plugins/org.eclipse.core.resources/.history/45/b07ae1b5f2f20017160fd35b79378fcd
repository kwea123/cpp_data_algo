#include <iostream>
#include <map>
#include <set>
#include <queue>
using namespace std;

template <typename V>
struct Node{

	V node;
	int dist;

	Node(V node, int dist){
		this->node = node;
		this->dist = dist;
	}

	bool operator<(const Node& b) const{
		return dist > b.dist; //we want smaller values in front
	}
};

template <typename V>
struct Graph{

	map<V, set<V> > adj;
	map<pair<V, V>, int> edgeWeights;

	Graph(){
		;
	}

	void addVertex(V v){
		set<V> s;
		adj[v] = s;
	}

	void addEdge(V i, V j, int d){
		adj[i].insert(j);
		pair<V, V> p(i,j);
		edgeWeights[p] = d;
	}

	bool hasEdge(V i, V j){
		return find(adj[i].begin(), adj[i].end(), j) != adj[i].end();
	}

	void removeEdge(V i, V j){
		adj[i].erase(j);
	}

	int edgeWeight(V i, V j){
		pair<V, V> p(i,j);
		return edgeWeights[p];
	}

	set<V> vertices(){
		set<V> s;
		for(auto it : adj)
			s.insert(it.first);
		return s;
	}

	set<V> neighbors(V i){
		return adj[i];
	}

};

template <typename V>
void shortestPath(V source, map<V, int>& distances){
	set<V> visited;
	priority_queue<V> q;
	q.push(Node(source, 0));
	while(!q.empty()){
		V n = q.top();
		q.pop();
		if(visited.count(n))
			continue;
		for(V w : neighbors(n)){
			int d = n.dist + edgeWeight(n.node, w);
			// is it better then distances[w]?
			if(!distances.count(w)||d<distances[w]){ //yes, it's shorter
				distances[w] = d;
				q.push(Node(w, d));
			}
		}
	}
}


int main() {
	Graph<Node<int> > g;
	for(int i=0;i<5;i++)
		g.addVertex(Node<int>(i, 0));
//	g.addEdge(0, 3, 1);
//	g.addEdge(1, 0, 2);
//	g.addEdge(1, 4, 1);
//	g.addEdge(2, 1, 4);
//	g.addEdge(2, 4, 1);
//	g.addEdge(2, 5, 3);
//	g.addEdge(0, 3, 1);
//	g.addEdge(3, 1, 1);
//	g.addEdge(4, 3, 1);


//	cout<<g.edgeWeight(2,1);
}
