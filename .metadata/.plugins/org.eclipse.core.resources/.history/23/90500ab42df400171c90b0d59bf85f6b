#include <iostream>
#include <vector>
#include <time.h> //set time seed
#include <stdlib.h>
using namespace std;

struct Cell{
	int x, y, rank;
	Cell* root;

	Cell(int x, int y){
		this->x = x;
		this->y = y;
		this->rank = 0;
		this->root = this;
	}

};

Cell* find(Cell* x){
	if(x->root!=x){ //path compression
		Cell* root = find(x->root);
		x->root = root;
		return root;
	}
	return x;
}

void uni(Cell* x, Cell* y){
	Cell* xRoot = find(x);
	Cell* yRoot = find(y);

	if(xRoot==yRoot)
		return;

	if(xRoot->rank < yRoot->rank)
		xRoot->root = yRoot;
	else if(xRoot->rank > yRoot->rank)
		yRoot->root = xRoot;
	else{
		yRoot->root = xRoot;
		xRoot->rank++;
	}
}

void Knuth(vector<pair<Cell*, Cell*> >& a, int n){
	for(int i=1;i<n;i++){
		int j = rand()%(i+1); // j in 0..i
		pair<Cell*, Cell*> tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}

int main() {
	srand(time(NULL));

	int N = 20;
	vector<vector<Cell*> > cells(N, vector<Cell*>(N));
	vector<pair<Cell*, Cell*> > p;

	for(int i=0;i<N;i++)
		for(int j=0;j<N;j++)
			cells[i][j] = new Cell(i, j);

	int totalP = 0;
	for(int i=0;i<N;i++)
		for(int j=0;j<N;j++){
			Cell* c = cells[i][j];
			if(i<N-1){
				p.push_back(pair<Cell*, Cell*>(c, cells[i+1][j]));
				totalP++;
			}
			if(j<N-1){
				p.push_back(pair<Cell*, Cell*>(c, cells[i][j+1]));
				totalP++;
			}
		}

	cout<<totalP<<endl;
	Knuth(p, totalP);

	for(int i=0;i<4;i++)
		cout<<p[i].first->x<<" "<<p[i].first->y<<","<<p[i].second->x<<" "<<p[i].second->y<<endl;

	return 0;
}
