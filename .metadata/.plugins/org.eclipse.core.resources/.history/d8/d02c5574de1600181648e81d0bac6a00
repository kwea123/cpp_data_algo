#include<iostream>
#include<math.h>
#include<string>
using namespace std;
class Node
{
	public:
		int key;
		string value;
		Node*next;
		Node():key(0),value(""),next(0){};
		Node(int key,string value):key(key),value(value),next(0){};
		Node(Node&data):key(data.key),value(data.value),next(data.next){};
		friend class  HashChainNode;
};
class HashChainNode
{
	private:
		int size;
		int count;
		Node**table;
		int hashfunction(int);
		void Double();
		void Shrink();
		void Rehash(int);
	public:
		HashChainNode(){};
		HashChainNode(int m):size(m),count(0){
			table=new Node*[size];//¤§«e½m²ß¥X¿ù
			for(int i=0;i<m;i++)
			table[i]=0;
		}
		~HashChainNode();
		void Insert(Node);
		void Delete(int);
		void Display();

};
int HashChainNode::hashfunction(int key)
{
	double a= 0.6180339887;
	double temp=a*key-floor(a*key);
	return floor(temp*size);
}
void HashChainNode::Double()
{
	int sizeorig;
	sizeorig=size;
	size=size*2;
	Rehash(sizeorig);
}
void HashChainNode::Shrink()
{
	int sizeorig;
	sizeorig=size;
	size=size/2;
	Rehash(size);
}
void HashChainNode::Rehash(int sizeorig)
{
	Node**newtable;
	Node*currentorig;
	int newindex;
	newtable=new Node*[size];
	for(int i=0;i<size;i++)
	{
		newtable[i]=0;
	}
	for(int i=0;i<sizeorig;i++)
	{
		currentorig=table[i];

		while(currentorig!=0)
		{
			newindex=hashfunction(currentorig->key);
			if(newtable[newindex]==0)
			{
				newtable[newindex]=currentorig;
				newtable[newindex]->next=0;
			}
			else
			{
				Node*temp;
				temp=newtable[newindex];
				newtable[newindex]=currentorig;
				newtable[newindex]->next=temp;
			}
			currentorig=currentorig->next;
		}
	}
	delete []table;
	table=newtable;
}
void HashChainNode::Insert(Node data)
{
	count++;
	if(count>=size)
	{
		Double();
	}
	int index;
	index=hashfunction(data.key);
	Node*NewNode=new Node(data);
	if(table[index]==0)
	{
	   table[index]=NewNode;
	   table[index]->next=0;
	}
	else
	{
		Node*temp;
		temp= table[index];
		table[index]=NewNode;
		table[index]->next=temp;
	}
}
void HashChainNode::Delete(int k)
{

	int index;
	Node*current;
	Node*prev;
	index=hashfunction(k);
	if(table[index]==0)
	{
		cout<<"data not fount"<<endl;
	}
	else
	{
		current=table[index];
		while(current!=0)
		{
			if(current->next->key==k)
			{
				prev=current->next;
				prev=prev->next;
				current->next=prev;
				cout<<"delete complete"<<endl;
				return ;
			}
			current=current->next;
		}
		cout<<"data not fount"<<endl;
	}
		count--;
	if(count<size/4)
	{
		Shrink();
	}
}
void HashChainNode::Display()
{
	Node*current;
	for(int i=0;i<size;i++)
	{
		current=table[i];
		cout<<"index "<<i<<" ";
		while(current!=0)
		{
			cout<<current->value<<" ";
			current=current->next;
		}
		cout<<endl;
	}
}

int main()
{
	HashChainNode hash(2);
	Node a,b;
//
//	string bs="shoegaze";
//    hash.Insert(a(12,"post rock"));
//    hash.Insert(b(592,"shoegaze"));
    hash.Display();
}
