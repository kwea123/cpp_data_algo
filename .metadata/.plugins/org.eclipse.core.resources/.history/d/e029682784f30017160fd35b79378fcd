#include <iostream>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <string>
using namespace std;

template <typename V>
struct Node{

	V node;
	int dist;

	Node(V node, int dist){
		this->node = node;
		this->dist = dist;
	}

	bool operator<(const Node& b) const{
		return dist > b.dist; //we want smaller values in front
	}
};

template <typename V>
struct Graph{

	map<V, set<V> > adj;
	map<pair<V, V>, int> edgeWeights;

	Graph(){
		;
	}

	void addVertex(V v){
		set<V> s;
		adj[v] = s;
	}

	void addEdge(V i, V j, int d){
		adj[i].insert(j);
		pair<V, V> p(i,j);
		edgeWeights[p] = d;
	}

	bool hasEdge(V i, V j){
		return find(adj[i].begin(), adj[i].end(), j) != adj[i].end();
	}

	void removeEdge(V i, V j){
		adj[i].erase(j);
	}

	int edgeWeight(V i, V j){
		pair<V, V> p(i,j);
		return edgeWeights[p];
	}

	set<V> vertices(){
		set<V> s;
		for(auto it : adj)
			s.insert(it.first);
		return s;
	}

	set<V> neighbors(V i){
		return adj[i];
	}

	void shortestPath(V source, map<V, int>& distances){
		set<V> visited;
		priority_queue<Node<V>> q;
		q.push(Node<V>(source, 0));
		while(!q.empty()){
			Node<V> n = q.top();
			q.pop();
			if(visited.count(n.node))
				continue;
			visited.insert(n.node);
			for(V w : neighbors(n.node)){
				int d = n.dist + edgeWeight(n.node, w);
				// is it better then distances[w]?
				if(!distances.count(w)||d<distances[w]){ //yes, it's shorter
					distances[w] = d;
					q.push(Node<V>(w, d));
				}
			}
		}
	}

	void shortestPath(V source, map<V, V>& antecedents, map<V, int>& distances){
		set<V> visited;
		priority_queue<Node<V>> q;
		q.push(Node<V>(source, 0));
		antecedents[source] = source;
		while(!q.empty()){
			Node<V> n = q.top();
			q.pop();
			if(visited.count(n.node))
				continue;
			visited.insert(n.node);
			for(V w : neighbors(n.node)){
				int d = n.dist + edgeWeight(n.node, w);
				// is it better then distances[w]?
				if(!distances.count(w)||d<distances[w]){ //yes, it's shorter
					distances[w] = d;
					q.push(Node<V>(w, d));
					antecedents[w] = n.node;
				}
			}
		}
	}

};

template <typename V>
void backTrack(V destination, V source, map<V, V> antecedents){
	V v = destination;
	cout<<v;
	while(v!=source){
		V ante = antecedents[v];
		cout<<"<-"<<ante;
		v = ante;
	}
}

void readGraph(string fileName, Graph<int>& g){
	ifstream fin(fileName);
	string s;
	int i, j, k;
	cout<<"reading graph...";
	while(fin>>s){
		if(s=="p"){
			fin>>s>>i>>j;
			for(int a=0;a<i;a++)
				g.addVertex(a);
		}
		else{
			fin>>i>>j>>k;
			g.addEdge(i, j, k);
			g.addEdge(j, i, k);
		}
	}
	cout<<"done."<<endl;
	fin.close();
}

int main() {
	Graph<int> g;

	/* DIJKSTRA */
//	map<int, int> distances;
//	g.shortestPath(2, distances);
//
//	for(auto it:distances)
//		cout<<it.first<<" "<<it.second<<endl;
//
//	/* PATH EXTRACTION */
//	map<int, int> distances;
//	map<int, int> antecedents;
//	g.shortestPath(2, antecedents, distances);
//	// shortest path to 0 from 2:
//	backTrack(0, 2, antecedents);

	readGraph("data/mini.gr", g);
//	readGraph("data/USA-road-d-NY.gr", g);

	return 0;
}
